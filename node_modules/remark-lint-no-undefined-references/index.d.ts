export default remarkLintNoUndefinedReferences;
export type Nodes = import('mdast').Nodes;
export type Root = import('mdast').Root;
/**
 * Configuration.
 */
export type Options = {
    /**
     * List of values to allow between `[` and `]` (optional)
     */
    allow?: ReadonlyArray<RegExp | string> | null | undefined;
    /**
     * Allow shortcut references, which are just brackets such as `[text]`
     * (`boolean`, default: `false`)
     */
    allowShortcutLink?: boolean | null | undefined;
};
declare const remarkLintNoUndefinedReferences: {
    (config?: import("../../node_modules/unified-lint-rule/lib/index.js").Label | import("../../node_modules/unified-lint-rule/lib/index.js").Severity | Readonly<Options> | [level: import("../../node_modules/unified-lint-rule/lib/index.js").Label | import("../../node_modules/unified-lint-rule/lib/index.js").Severity, option?: Readonly<Options> | null | undefined] | null | undefined): ((tree: import("mdast").Root, file: import("vfile").VFile, next: import("unified").TransformCallback<import("mdast").Root>) => undefined) | undefined;
    readonly name: string;
};
//# sourceMappingURL=index.d.ts.map